#!/bin/bash

# Function to check if a table exists
function is_exist {
    declare -i exist=0
    for file in `ls "./db/$database_name"`; do
        if [ "$file" == "$1" ]; then
            exist=1
            echo "$file" "$1"
            break
        fi
    done
    return $exist
}

# Function to check if input is a number
function is_num {
    if [ $# -eq 0 ]; then
        echo "You must provide an argument"
        exit 1
    fi
    if [[ $1 =~ ^[0-9]+$ ]]; then
        return 1
    else
        return 0
    fi
}

function create_table_types {
    if [ $# -eq 0 ]; then
        exit 1
    fi
    table_name=$1
    local n=0
    while true; do
        n=$(zenity --entry --title="create table" --text="Enter number of fields")
        is_num $n
        if [ $? -eq 1 ]; then
           # echo "correct"
            break
        fi        
    done
    declare fields_names=""
    declare fields_types=""
    primary_key=0
    chosen=0
    for i in $(seq 1 $n); do
        local f=$(zenity --entry --text="Enter field number $i")
        local c=""
        c=$(zenity --list --column="select field type" \
		"integer" "string" "char")	
	if [ $chosen -ne 1 ]
	then
		choice=$(zenity --list --column="set as pk?" \
			"pk" "not pk")
			if [ "$choice" == "pk" ]
			then
				chosen=1;
			fi
		if [ $chosen -eq 1 ]
		then
			primary_key=1
			f="+$f"
		fi
	fi
	if [ $i -eq $n ]
	then
		if [ $primary_key -eq 0 ]
		then
			f="+$f"
		fi
	fi
        echo $c
        if [[ $fields_names == "" ]]; then
            fields_names="$f"
        else
            fields_names="${fields_names}|${f}"
        fi
        if [[ $fields_types == "" ]]; then
            fields_types="$c"
        else
            fields_types="${fields_types}|${c}"
        fi
    done
    echo $fields_names >> "./db/$database_name/$table_name"
    echo $fields_types >> "./db/$database_name/$table_name"
}

function create_table {
    create_table_types $1
    zenity --info --text="table created sucessfully."
}

function list_tables {
    files=$(ls "./db/$database_name/")
    if [ -z "$files" ]; then
        zenity --info --text="No tables available."
    else
        zenity --list --title="List Tables" --text="Available tables:" --column="Tables" $files
    fi
}

function drop_table {
    table_name=$(zenity --entry --title="Drop Table" --text="Enter table name to delete:")

    if [ ! -f "./db/$database_name/$table_name" ]; then
        zenity --error --text="Table '$table_name' does not exist."
        return
    fi

    zenity --question --text="Are you sure you want to delete table '$table_name'?" --ok-label="Yes" --cancel-label="No"
    if [ $? -eq 0 ]; then
        rm -r "./db/$database_name/$table_name"
        zenity --info --text="Table '$table_name' has been deleted."
    else
        zenity --info --text="Operation cancelled."
    fi
}



function insert_into_table {
    database_name=$1
    tablename=$(zenity --entry --title="Insert Into Table" --text="Enter table name:")

    if [ ! -f "./db/$database_name/$tablename" ]; then
        zenity --error --text="Table '$tablename' does not exist."
        return
    fi

    table_header=$(head -n 1 "./db/$database_name/$tablename")
    data_types=$(sed -n '2p' "./db/$database_name/$tablename")

    col_names=($(echo "$table_header" | tr '|' '\n'))
    col_types=($(echo "$data_types" | tr '|' '\n'))

   
    pk_index=-1
    for i in "${!col_names[@]}"; do
        if [[ "${col_names[i]}" == *"+"* ]]; then
            pk_index=$i
            pk_column="${col_names[i]//+/}" 
            break
        fi
    done

 
    if [ $pk_index -eq -1 ]; then
        zenity --error --text="No primary key defined in the table."
        return
    fi

    row_data=""
    pk_value=""

  
    for i in "${!col_names[@]}"; do
        while true; do
            value=$(zenity --entry --title="Insert Data" --text="Enter '${col_names[i]//+/}' (${col_types[i]}):")

          
            if [[ "${col_types[i]}" == "integer" && ! "$value" =~ ^[0-9]+$ ]]; then
                zenity --error --text="${col_names[i]//+/} must be an integer. Try again."
            elif [[ "${col_types[i]}" == "string" && -z "$value" ]]; then
                zenity --error --text="${col_names[i]//+/} cannot be empty. Try again."
            else
           
                if [ $i -eq $pk_index ]; then
                    pk_value=$value
                    if [ -z "$pk_value" ]; then
                        zenity --error --text="Primary key '${col_names[i]//+/}' cannot be NULL. Try again."
                        continue
                    fi
               
                    if grep -q "^${pk_value}|" "./db/$database_name/$tablename"; then
                        zenity --error --text="Primary key '${pk_value}' already exists. Try again."
                        continue
                    fi
                fi

                row_data+="$value|"
                break
            fi
        done
    done

    
    row_data=${row_data%|}
    echo "$row_data" >> "./db/$database_name/$tablename"
    zenity --info --text="Data inserted successfully."
}


function delete_from_table {
    database_name=$1
    tablename=$(zenity --entry --title="Delete From Table" --text="Enter table name:")

    if [ ! -f "./db/$database_name/$tablename" ]; then
        zenity --error --text="Table '$tablename' does not exist."
        return
    fi

    header=$(head -n 1 "./db/$database_name/$tablename")
    col_names=($(echo "$header" | awk -F'|' '{for(i=1;i<=NF;i++) print $i}'))

    pattern=""
    for col in "${col_names[@]}"; do
        value=$(zenity --entry --title="Delete Condition" --text="Enter value for '$col' (leave empty to skip):")
        if [[ -n $value ]]; then
            if [[ -n $pattern ]]; then
                pattern+=".*"
            fi
            pattern+="$value"
        fi
    done

    if [[ -z $pattern ]]; then
        zenity --info --text="No conditions provided. Operation cancelled."
        return
    fi

    matched=$(grep "$pattern" "./db/$database_name/$tablename")

    if [[ -z $matched ]]; then
        zenity --info --text="No matched results."
        return
    fi

    zenity --text-info --title="Matched Rows" --filename=<(echo "$matched")
    confirm=$(zenity --question --text="Are you sure you want to delete matching rows?" --ok-label="Yes" --cancel-label="No")
    if [[ $? -ne 0 ]]; then
        zenity --info --text="Operation cancelled."
        return
    fi

    sed -i "/${pattern}/d" "./db/$database_name/$tablename"
    zenity --info --text="Rows deleted successfully."
}


function view_table {
    database_name=$1
    tablename=$(zenity --entry --title="View Table" --text="Enter table name to view:")

    if [ ! -f "./db/$database_name/$tablename" ]; then
        zenity --error --text="Table '$tablename' does not exist."
        return
    fi

    zenity --text-info --title="Table: $tablename" --filename="./db/$database_name/$tablename"
}



# Function to display table menu
function table_menu {
    while [ 1 -eq 1 ]
    do
      choice=$(zenity --list --title="Database Menu" --text="Please select an option:" --column="menu"\
        "Create Table" \
        "List Tables" "Drop Table" "Insert into table" \
        "Delete from table" \
        "Select from table" "Update table" "Return to Main menu" "View table content" "Exit")
        case $choice in
            "Create Table" )
                
                table_name=$(zenity --entry --text="Enter table name")
                is_exist $table_name
                if [ $? -eq 1 ]; then
                    zenity --error --text="the table $table_name doesn't exist"
                    echo "Sorry, table $table_name already exists."
                else
                    create_table $table_name
                fi
                ;;
            "List Tables" )
                zenity --info --text="Listing tables..."
                list_tables
                ;;
            "Drop Table" )
                    drop_table $table_name
                ;;
            "Insert into table" )
                insert_into_table $database_name
                ;;
            "Delete from table" )
                delete_from_table $database_name
                ;;

	"Select from table" )
        table_name=$(zenity --entry --text="Enter table name")
		source select.sh $database_name $table_name
			;;

			"Update table" )
		read -p "Enter table name" table_name
		source update.sh $database_name	$table_name
		;;

	"Return to Main menu" )

		source maim_menu.sh
	;;

"View table content" )
	view_table $database_name
	;;

"Exit" )
    zenity --info --text="Exit the script .. Good bye!"
	exit 0
	;;


		
            * )
                zenity --error --text="Invalid option."
                ;;
        esac
    done
}

# Main script execution
if [ $# -eq 0 ]; then
    zenity --error --text="you are not connected to a database."
    return 1
fi
database_name=$1
table_menu
